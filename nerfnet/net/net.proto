/*
 * Copyright 2020 Andrew Rossignol andrew.rossignol@gmail.com
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

syntax = "proto2";

package nerfnet;

// The request from the primary radio to the secondary.
message Request {
  // A simple ping request.
  message Ping {
    // A value to round-trip from secondary to primary.
    optional uint32 value = 1;
  }

  // A TxRx request for the network tunnel.
  message NetworkTunnelTxRx {
    // The bytes to send to the secondary radio.
    optional bytes payload = 1;

    // The number of remaining bytes for this packet. Once zero, write out
    // to the tunnel interface.
    optional uint32 remaining_bytes = 2;
  }

  oneof request {
    Ping ping = 1;
    NetworkTunnelTxRx network_tunnel_txrx = 2;
  }
}

// The response from the secondary radio to the primary.
message Response {
  // The response to a ping request.
  message Ping {
    // The value round-tripped back from secondary to primary.
    optional uint32 value = 1;
  }

  // A TxRx request for the network tunnel.
  message NetworkTunnelTxRx {
    // The bytes to send back to the primary radio.
    optional bytes payload = 1;

    // The number of remaining bytes for this packet. Once zero, write out
    // to the tunnel interface.
    optional uint32 remaining_bytes = 2;
  }

  oneof response {
    Ping ping = 1;
    NetworkTunnelTxRx network_tunnel_txrx = 2;
  }
}
